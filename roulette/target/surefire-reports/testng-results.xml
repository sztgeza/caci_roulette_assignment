<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="9" passed="9">
  <reporter-output>
  </reporter-output>
  <suite name="caci.roulette.RouletteGameTest" duration-ms="467" started-at="2017-03-16T23:41:08Z" finished-at="2017-03-16T23:41:08Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="467" started-at="2017-03-16T23:41:08Z" finished-at="2017-03-16T23:41:08Z">
      <class name="caci.roulette.RouletteGameTest">
        <test-method status="PASS" signature="setup()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="setup" is-config="true" duration-ms="329" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="shouldExceptionThrownWhenBetWithInvalidPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldExceptionThrownWhenBetWithInvalidPocket" duration-ms="23" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldExceptionThrownWhenBetWithInvalidPocket -->
        <test-method status="PASS" signature="shouldExceptionThrownWhenBetWithNonPositiveAmount()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldExceptionThrownWhenBetWithNonPositiveAmount" duration-ms="3" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldExceptionThrownWhenBetWithNonPositiveAmount -->
        <test-method status="PASS" signature="shouldPlayerWin36xWhenPocketRuleAndWinningPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWin36xWhenPocketRuleAndWinningPocket" duration-ms="53" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWin36xWhenPocketRuleAndWinningPocket -->
        <test-method status="PASS" signature="shouldPlayerWinDoubleWhenEvenRuleAndEvenPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinDoubleWhenEvenRuleAndEvenPocket" duration-ms="2" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinDoubleWhenEvenRuleAndEvenPocket -->
        <test-method status="PASS" signature="shouldPlayerWinDoubleWhenOddRuleAndOddPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinDoubleWhenOddRuleAndOddPocket" duration-ms="2" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinDoubleWhenOddRuleAndOddPocket -->
        <test-method status="PASS" signature="shouldPlayerWinZeroWhenEvenRuleAndOddPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinZeroWhenEvenRuleAndOddPocket" duration-ms="1" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinZeroWhenEvenRuleAndOddPocket -->
        <test-method status="PASS" signature="shouldPlayerWinZeroWhenOddOrEvenAndZeroPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinZeroWhenOddOrEvenAndZeroPocket" duration-ms="0" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinZeroWhenOddOrEvenAndZeroPocket -->
        <test-method status="PASS" signature="shouldPlayerWinZeroWhenOddRuleAndEvenPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinZeroWhenOddRuleAndEvenPocket" duration-ms="1" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinZeroWhenOddRuleAndEvenPocket -->
        <test-method status="PASS" signature="shouldPlayerWinZeroWhenPocketRuleAndLosingPocket()[pri:0, instance:caci.roulette.RouletteGameTest@e580929]" name="shouldPlayerWinZeroWhenPocketRuleAndLosingPocket" duration-ms="1" started-at="2017-03-17T00:41:08Z" finished-at="2017-03-17T00:41:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPlayerWinZeroWhenPocketRuleAndLosingPocket -->
      </class> <!-- caci.roulette.RouletteGameTest -->
    </test> <!-- Command line test -->
  </suite> <!-- caci.roulette.RouletteGameTest -->
</testng-results>
